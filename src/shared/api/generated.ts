/**
 * Generated by orval v6.30.2 üç∫
 * Do not edit manually.
 * server
 * OpenAPI spec version: 1.0.0
 */
import { createInstance } from "./api-instance";
import type { BodyType } from "./api-instance";
export interface LessonDto {
  createdAt: string;
  id: number;
  sectionId: number;
  sequence: number;
  text: string;
  title: string;
}

export interface PatchLessonDto {
  sequence: number;
  text: string;
  title: string;
}

export interface CreateLessonDto {
  sectionId: number;
  text: string;
  title: string;
}

export interface SectionDto {
  courseId: number;
  createdAt: string;
  id: number;
  sequence: number;
  title: string;
}

export interface PatchSectionDto {
  sequence: number;
  title: string;
}

export interface CreateSectionDto {
  courseId: number;
  title: string;
}

export interface CreateCoursesDtoWithOwner {
  duration: string;
  img: string;
  price: number;
  tags: string[];
  title: string;
}

export interface PatchCourseDto {
  duration: string;
  img: string;
  price: number;
  sequence: number;
  tags: string[];
  title: string;
}

export interface CreateCourseDto {
  duration: string;
  img: string;
  price: number;
  tags: string[];
  title: string;
}

export interface PatchAccountDto {
  firstName: string;
  lastName: string;
  username: string;
}

export interface AccountDto {
  firstName: string;
  id: number;
  lastName: string;
  userId: number;
  username: string;
}

export interface SessionInfoDto {
  email: string;
  exp: number;
  iat: number;
  id: number;
  role: string;
}

export interface SignInBodyDto {
  email: string;
  password: string;
}

export interface SignUpBodyDto {
  email: string;
  password: string;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const authControllerSignUp = (
  signUpBodyDto: BodyType<SignUpBodyDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/sign-up`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signUpBodyDto,
    },
    options,
  );
};

export const authControllerDelete = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<string>(
    { url: `/auth/delete`, method: "DELETE" },
    options,
  );
};

export const authControllerSignIn = (
  signInBodyDto: BodyType<SignInBodyDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/sign-in`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signInBodyDto,
    },
    options,
  );
};

export const authControllerSignOut = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/auth/sign-out`, method: "POST" },
    options,
  );
};

export const authControllerGetSessionInfo = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<SessionInfoDto>(
    { url: `/auth/session`, method: "GET" },
    options,
  );
};

export const accountControllerGetAccount = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<AccountDto>(
    { url: `/account`, method: "GET" },
    options,
  );
};

export const accountControllerPatchAccount = (
  patchAccountDto: BodyType<PatchAccountDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<AccountDto>(
    {
      url: `/account`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: patchAccountDto,
    },
    options,
  );
};

export const coursesControllerCreate = (
  createCourseDto: BodyType<CreateCourseDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/courses/create`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createCourseDto,
    },
    options,
  );
};

export const coursesControllerPatchCourse = (
  courseId: number,
  patchCourseDto: BodyType<PatchCourseDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<CreateCourseDto>(
    {
      url: `/courses/update/${courseId}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: patchCourseDto,
    },
    options,
  );
};

export const coursesControllerGetAllCourses = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<CreateCoursesDtoWithOwner[]>(
    { url: `/courses`, method: "GET" },
    options,
  );
};

export const coursesControllerDelete = (
  courseId: number,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<CreateCoursesDtoWithOwner[]>(
    { url: `/courses/${courseId}`, method: "DELETE" },
    options,
  );
};

export const coursesControllerGetMyCourses = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<CreateCoursesDtoWithOwner[]>(
    { url: `/courses/my`, method: "GET" },
    options,
  );
};

export const coursesControllerGetCourseById = (
  courseId: number,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<CreateCoursesDtoWithOwner>(
    { url: `/courses/my/${courseId}`, method: "GET" },
    options,
  );
};

export const coursesControllerGetPageLesson = (
  courseId: number,
  sectionId: number,
  lessonId: number,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<CreateCoursesDtoWithOwner>(
    {
      url: `/courses/my/${courseId}/sections/${sectionId}/lessons/${lessonId}`,
      method: "GET",
    },
    options,
  );
};

export const sectionsControllerCreate = (
  createSectionDto: BodyType<CreateSectionDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/sections/create`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createSectionDto,
    },
    options,
  );
};

export const sectionsControllerPatchSection = (
  sectionId: number,
  patchSectionDto: BodyType<PatchSectionDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<SectionDto>(
    {
      url: `/sections/update/${sectionId}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: patchSectionDto,
    },
    options,
  );
};

export const sectionsControllerDeleteSection = (
  sectionId: number,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/sections/delete/${sectionId}`, method: "DELETE" },
    options,
  );
};

export const lessonsControllerCreate = (
  createLessonDto: BodyType<CreateLessonDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/lessons/create`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createLessonDto,
    },
    options,
  );
};

export const lessonsControllerPatchCourse = (
  lessonId: number,
  patchLessonDto: BodyType<PatchLessonDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<LessonDto>(
    {
      url: `/lessons/update/${lessonId}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: patchLessonDto,
    },
    options,
  );
};

export const lessonsControllerDeletelesson = (
  lessonId: number,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/lessons/delete/${lessonId}`, method: "DELETE" },
    options,
  );
};

export const buyControllerBuyCourse = (
  courseId: number,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/buy/${courseId}`, method: "POST" },
    options,
  );
};

export type AuthControllerSignUpResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignUp>>
>;
export type AuthControllerDeleteResult = NonNullable<
  Awaited<ReturnType<typeof authControllerDelete>>
>;
export type AuthControllerSignInResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignIn>>
>;
export type AuthControllerSignOutResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignOut>>
>;
export type AuthControllerGetSessionInfoResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetSessionInfo>>
>;
export type AccountControllerGetAccountResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerGetAccount>>
>;
export type AccountControllerPatchAccountResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerPatchAccount>>
>;
export type CoursesControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof coursesControllerCreate>>
>;
export type CoursesControllerPatchCourseResult = NonNullable<
  Awaited<ReturnType<typeof coursesControllerPatchCourse>>
>;
export type CoursesControllerGetAllCoursesResult = NonNullable<
  Awaited<ReturnType<typeof coursesControllerGetAllCourses>>
>;
export type CoursesControllerDeleteResult = NonNullable<
  Awaited<ReturnType<typeof coursesControllerDelete>>
>;
export type CoursesControllerGetMyCoursesResult = NonNullable<
  Awaited<ReturnType<typeof coursesControllerGetMyCourses>>
>;
export type CoursesControllerGetCourseByIdResult = NonNullable<
  Awaited<ReturnType<typeof coursesControllerGetCourseById>>
>;
export type CoursesControllerGetPageLessonResult = NonNullable<
  Awaited<ReturnType<typeof coursesControllerGetPageLesson>>
>;
export type SectionsControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof sectionsControllerCreate>>
>;
export type SectionsControllerPatchSectionResult = NonNullable<
  Awaited<ReturnType<typeof sectionsControllerPatchSection>>
>;
export type SectionsControllerDeleteSectionResult = NonNullable<
  Awaited<ReturnType<typeof sectionsControllerDeleteSection>>
>;
export type LessonsControllerCreateResult = NonNullable<
  Awaited<ReturnType<typeof lessonsControllerCreate>>
>;
export type LessonsControllerPatchCourseResult = NonNullable<
  Awaited<ReturnType<typeof lessonsControllerPatchCourse>>
>;
export type LessonsControllerDeletelessonResult = NonNullable<
  Awaited<ReturnType<typeof lessonsControllerDeletelesson>>
>;
export type BuyControllerBuyCourseResult = NonNullable<
  Awaited<ReturnType<typeof buyControllerBuyCourse>>
>;
